IWEB_CORE_ROOT = $$(IMAKECORE_ROOT)
SCRIPT_PATH = $$IWEB_CORE_ROOT/.system/
QMAKE_SOURCE_DIR =

defineTest(IQMakeCoreInit){
    QMAKE_SOURCE_DIR = $$PWD
    export(QMAKE_SOURCE_DIR)
    findPythonInterpreter()

    script_path = $$getPythonFilePath("IMakeCore.py")
    cmd = $$python -B $$script_path $$PWD qmake

    !exists($$PWD/packages.json){
        error("$$PWD/package.json configure file not exist, please create one")
    }

    res = $$system($$cmd, blob, result)
    ! isEqual(res, "") {
        message($$res)
    }
    ! isEqual(result, 0) {
        message("packages configuration failed")
        return(false)
    }
    message("packages configured successfully")
    return(true)
}

defineTest(findPythonInterpreter) {
    win32 {
        python = $$system(where python /F)
        python = $$first(python)
        isEmpty(python): python = $$system(where python3)
    } else {
        python = $$system(which python3 || which python)
    }
    isEmpty(python): {
        error("Python interpreter not found")
        return(false)
    }
    export(python)
    return(true)
}

defineReplace(getPythonFilePath){
    script_path = $$(IMAKECORE_ROOT)/.system/$$1

    !exists($$script_path) {
        error("script not found at $$script_path")
    }
    script_path = $$absolute_path($$script_path)
    return ("$$script_path")
}

############################
# below is load functions
############################

defineReplace(findFilesByPython){
    ARGS = $$ARGS 
    base_dir = $$take_first($$ARGS)
    suffixes = $$ARGS

    script_path = $$getPythonFilePath("IMakeCore_loadFiles.py")
    cmd = $$python -B $$script_path $$base_dir $$suffixes
    
    res = $$system($$cmd, lines, result)
    ! isEqual(result, 0) {
        error("$$base_dir packages configuration failed")
    }
    return($$res)
}

defineTest(loadTo){
    allData = $$ARGS
    dest = $$take_first(allData)
    for(f, allData){
        !isEmpty(f){
            $$dest += $$imakecore_current_lib_dir/$$f
        }
    }
    export($$dest)
}

defineTest(loadToRaw){
    allData = $$ARGS
    dest = $$take_first(allData)
    for(f, allData){
        !isEmpty(f){
            $$dest += $$f
        }
    }
    export($$dest)
}

defineTest(loadToSources){
    loadTo(SOURCES $$ARGS)
}

defineTest(loadToSourcesRaw){
    loadToRaw(HEADERS $$ARGS)
}

defineTest(loadToHeaders){
    loadTo(HEADERS $$ARGS)
    export(HEADERS)
}

defineTest(loadToHeadersRaw){
    loadToRaw(HEADERS $$ARGS)
    export(HEADERS)
}

defineTest(loadToIncludes){
    loadTo(INCLUDEPATH $$ARGS)
}

defineTest(loadToIncludesRaw){
    loadToRaw(INCLUDEPATH $$ARGS)
}

defineTest(loadToResources){
    loadTo(RESOURCES $$ARGS)
}

defineTest(loadToResourcesRaw){
    loadToRaw(RESOURCES $$ARGS)
}

defineTest(loadToLibraries){
    loadTo(LIBS $$ARGS)
}

defineTest(loadToLibrariesRaw){
    loadToRaw(LIBS $$ARGS)
}

defineTest(autoLoadInclude) {
    filePath = $$imakecore_current_lib_dir/__includes.txt
    exists($$filePath) {
        dirNames = $$cat($$filePath)
        loadToIncludes($$dirNames)
    } else {
        loadToIncludes(/)
    }
}

defineTest(autoLoadHeaders){
    filePath = $$imakecore_current_lib_dir/__headers.txt
    exists($$filePath){
        fileNames = $$cat($$filePath, lines)
        loadToHeaders($$fileNames)
    }else{
        fileNames = $$findFilesByPython($$imakecore_current_lib_dir .h .hpp .hxx)
        loadToHeadersRaw($$fileNames)
    }
}

defineTest(autoLoadSources){
    filePath = $$imakecore_current_lib_dir/__sources.txt
    exists($$filePath) {
        fileNames = $$cat($$filePath, lines)
        loadToSources($$fileNames)
    }else{
        fileNames = $$findFilesByPython($$imakecore_current_lib_dir .c .cpp .cxx .c++ .cc)
        loadToSourcesRaw($$fileNames)
    }
}

defineTest(autoLoadResources){
    filePath = $$imakecore_current_lib_dir/__resources.txt
    exists($$filePath) {
        fileNames = $$cat($$filePath, lines)
        loadToResources($$fileNames)
    }else{
        fileNames = $$findFilesByPython($$imakecore_current_lib_dir .rcc)
        loadToResourcesRaw($$fileNames)
    }
}

defineReplace(getQuotedString) {
    str = $$1
    startsWithDouble = $$find(str, "=\"\"")
    !isEmpty(startsWithDouble) {
        endsWithDouble = $$find(str, "\"\"$$")
        !isEmpty(endsWithDouble) {
            str = $$replace(str, "=\"\"", "=\\\"")
            str = $$replace(str, "\"\"$$", "\\\"")
            return($$str)
        }
    }
    return($$str)
}

defineTest(loadToDefinitions){
    allData = $$ARGS
    for(line, allData){
        !isEmpty(line){
            line = $$getQuotedString($$line)
            DEFINES += $$line
        }
    }
    export(DEFINES)
}

defineTest(autoLoadDefinitions){
    filePath = $$imakecore_current_lib_dir/__definitions.txt
    exists($$filePath) {
        fileNames = $$cat($$filePath, lines)
        loadToDefinitions($$fileNames)
    }
}

defineTest(autoLoadPackage){
    autoLoadInclude()
    autoLoadHeaders()
    autoLoadSources()
    autoLoadResources()
    autoLoadDefinitions()
}

