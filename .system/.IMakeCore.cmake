function(loadTo)
    list(POP_FRONT ARGN cache_var_name)
    list(JOIN ARGN ";" cached_list_value)
    list(APPEND cached_list_value  $CACHE{${cache_var_name}})
    set(${cache_var_name} ${cached_list_value} CACHE INTERNAL "" FORCE)
endfunction()

function(loadToSources)
    loadTo(SOURCES_CACHE ${ARGV})
endfunction()

function(loadToHeaders)
    loadTo(HEADERS_CACHE ${ARGV})
endfunction()

function(loadToIncludes)
    loadTo(INCLUDES_CACHE ${ARGV})
endfunction(loadToIncludes)

function(loadToResources)
    loadTo(SOURCES_CACHE ${ARGV})
endfunction()

function(loadToLibraries)
    loadTo(LIBRARIES_CACHE ${ARGV})
endfunction()

function(loadToDefinitions)
    loadTo(DEFINITIONS_CACHE ${ARGV})
endfunction()

function(loadToForms)
    loadTo(FORMS_CACHE ${ARGV})
endfunction()

function(prepareCacheVariables)
    set(HEADERS_CACHE CACHE INTERNAL "" FORCE)
    set(SOURCES_CACHE CACHE INTERNAL "" FORCE)
    set(INCLUDES_CACHE CACHE INTERNAL "" FORCE)
    set(LIBRARIES_CACHE CACHE INTERNAL "" FORCE)
    set(DEFINITIONS_CACHE CACHE INTERNAL "" FORCE)
    set(FORMS_CACHE CACHE INTERNAL "" FORCE)
endfunction()

function(resolvePackageInfo)
    find_program(Python_EXECUTABLE python) 
    if("${Python_EXECUTABLE}" STREQUAL "")
        message(FATAL_ERROR "Python not found")
        return()
    endif()

    file(TO_CMAKE_PATH "$ENV{IMAKECORE_ROOT}/.system/IMakeCore.py" script_path)
    execute_process(
        COMMAND  ${Python_EXECUTABLE} -B ${script_path} ${CMAKE_CURRENT_LIST_DIR} cmake
        OUTPUT_VARIABLE infoVal
        RESULT_VARIABLE result
#        COMMAND_ECHO STDOUT
    )

    if (NOT infoVal STREQUAL "")
        message(STATUS "${infoVal}")
    endif()
    
    if (NOT result EQUAL 0)
        message(FATAL_ERROR "packages configuration failed")
        return()
    endif()
    
    message(STATUS "packages configured successfully")
    include(${CMAKE_SOURCE_DIR}/.package.cmake)

endfunction()

function(assambleTarget)
    foreach(target $CACHE{TARGET_CACHE})
        target_sources(${target} PRIVATE ${SOURCES_CACHE} ${HEADERS_CACHE} ${FORMS_CACHE})
        target_include_directories(${target} PRIVATE $CACHE{INCLUDES_CACHE})
        target_link_libraries(${target} PRIVATE $CACHE{LIBRARY_CACHE})
        target_compile_definitions(${target} PRIVATE $CACHE{DEFINITIONS_CACHE})
    endforeach()
endfunction()

function(initializeTarget)
    list(LENGTH ARGN argc)
    if(argc EQUAL 0)
        message(FATAL_ERROR "initializeTarget function must contains at least one target name")
    endif()
    set(TARGET_CACHE ${ARGN} CACHE INTERNAL "" FORCE)

    prepareCacheVariables()
    resolvePackageInfo()
    assambleTarget()
endfunction()

function(ICmakeCoreInit)
    initializeTarget(${ARGV})
endfunction()

# functions of load package

function(split_string_by_newline out_var input_string)
    string(RANDOM LENGTH 8 random_suffix)
    set(temp_file "${CMAKE_CURRENT_BINARY_DIR}/split_temp_${random_suffix}.txt")
    file(WRITE "${temp_file}" "${input_string}")
    file(STRINGS "${temp_file}" result LENGTH_MINIMUM 0)
    file(REMOVE "${temp_file}")
    set(${out_var} "${result}" PARENT_SCOPE)
endfunction()

function(findFilesByPython returnValue)
    find_program(Python_EXECUTABLE python) 
    if("${Python_EXECUTABLE}" STREQUAL "")
        message(FATAL_ERROR "Python not found")
        return()
    endif()

    file(TO_CMAKE_PATH "$ENV{IMAKECORE_ROOT}/.system/IMakeCore_loadFiles.py" script_path)
    execute_process(
        COMMAND  ${Python_EXECUTABLE} -B ${script_path} ${ARGN}
        OUTPUT_VARIABLE infoVal
        RESULT_VARIABLE result
#        COMMAND_ECHO STDOUT
    )

    if (NOT result EQUAL 0)
        message(FATAL_ERROR "packages configuration failed")
        return()
    endif()

    if (NOT infoVal STREQUAL "")
        split_string_by_newline(infoVal "${infoVal}")
        set(${returnValue} ${infoVal} PARENT_SCOPE)
        return()
    endif()
endfunction()   

function(findFilesByFiles filePath fileNames)
    file(STRINGS  ${filePath} lines)
    set(temp)
    foreach(line ${lines})
        list(APPEND temp ${imakecore_current_lib_dir}/${line})
    endforeach()
    set(${fileNames} ${temp} PARENT_SCOPE)
endfunction()

function(get_quoted_definition_string out_var input_str)
    string(FIND "${input_str}" "=\"\"" find_pos)
    if(NOT find_pos EQUAL -1)
        # 检查是否以 "\"\"" 结尾
        string(LENGTH "${input_str}" str_len)
        if(str_len GREATER_EQUAL 2)
            math(EXPR end_index "${str_len} - 2")
            string(SUBSTRING "${input_str}" ${end_index} 2 end_part)
            if(end_part STREQUAL "\"\"")
                string(REPLACE "=\"\"" "=\"" modified_str "${input_str}")
                string(REGEX REPLACE "\"\"" "\"" modified_str "${modified_str}")
                set(${out_var} "${modified_str}" PARENT_SCOPE)
                return()
            endif()
        endif()
    endif()

    string(FIND "${input_str}" "=\\\"" find_pos)
    if(NOT find_pos EQUAL -1)
        string(LENGTH "${input_str}" str_len)
        if(str_len GREATER_EQUAL 2)
            math(EXPR end_index "${str_len} - 2")
            string(SUBSTRING "${input_str}" ${end_index} 2 end_part)
            if(end_part STREQUAL "\\\"")
                string(REPLACE "=\\\"" "=\"" modified_str "${input_str}")
                string(REPLACE "\\\"" "\"" modified_str "${modified_str}")
                set(${out_var} "${modified_str}" PARENT_SCOPE)
                return()
            endif()
        endif()
    endif()

    # 如果不满足条件，返回原始字符串
    set(${out_var} "${input_str}" PARENT_SCOPE)
endfunction()

function(autoLoadInclude)
    set(filePath ${imakecore_current_lib_dir}/__includes.txt)
    if(EXISTS ${filePath})
        findFilesByFiles(${filePath} fileNames)
        loadToIncludes(${fileNames})
    else()
        findFilesByPython(fileNames ${imakecore_current_lib_dir} .h .hpp .hxx)
        loadToIncludes( ${imakecore_current_lib_dir}/ )
    endif()
endfunction()

function(autoLoadHeaders)
    set(filePath ${imakecore_current_lib_dir}/__headers.txt)
    if(EXISTS ${filePath})
        findFilesByFiles(${filePath} fileNames)
        loadToHeaders(${fileNames})
    else()
        findFilesByPython(fileNames ${imakecore_current_lib_dir} .h .hpp .hxx)
        loadToHeaders(${fileNames})
    endif()
endfunction()

function(autoLoadSources)
    set(filePath ${imakecore_current_lib_dir}/__sources.txt)
    if(EXISTS ${filePath})
        findFilesByFiles(${filePath} fileNames)
        loadToSources(${fileNames})
    else()
        findFilesByPython(fileNames ${imakecore_current_lib_dir} .c .cpp .c++ .cxx)
        loadToSources(${fileNames})
    endif()
endfunction()

function(autoLoadResources)
    set(filePath ${imakecore_current_lib_dir}/__resources.txt)
    if(EXISTS ${filePath})
        findFilesByFiles(${filePath} fileNames)
        loadToResources(${fileNames})
    else()
        findFilesByPython(fileNames ${imakecore_current_lib_dir} .rcc)
        loadToResources(${fileNames})
    endif()
endfunction()

function(autoLoadForms)
    set(filePath ${imakecore_current_lib_dir}/__uis.txt)
    if(EXISTS ${filePath})
        findFilesByFiles(${filePath} fileNames)
        LoadToForms(${fileNames})
    else()
        findFilesByPython(fileNames ${imakecore_current_lib_dir} .ui)
        LoadToForms(${fileNames})
    endif()
endfunction()

function(autoLoadDefinitions)
    set(filePath ${imakecore_current_lib_dir}/__definitions.txt)
    if(EXISTS ${filePath})
        file(STRINGS  ${filePath} lines)
        set(temp)
        foreach(line ${lines})
            get_quoted_definition_string(value ${line})
            list(APPEND temp ${value})
        endforeach()
        loadToDefinitions(${temp})
    endif()
endfunction()

function(autoLoadPackage)
    autoLoadInclude()
    autoLoadHeaders()
    autoLoadSources()
    autoLoadResources()
    autoLoadDefinitions()
    autoLoadForms()
endfunction()
